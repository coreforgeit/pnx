from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from datetime import datetime, timedelta

from settings import conf
from db import Venue, Event, TicketStatRow, BookStatRow
from enums import AdminCB, Action, UserStatus, EventStep, OptionData, Key


# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
def get_admin_main_kb(user_status: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='ü™ë –ë—Ä–æ–Ω–∏', callback_data=f'{AdminCB.VIEW_START.value}:{Key.QR_BOOK.value}')
    kb.button(text='üé´  –ë–∏–ª–µ—Ç—ã', callback_data=f'{AdminCB.VIEW_START.value}:{Key.QR_TICKET.value}')
    if user_status == UserStatus.ADMIN.value:
        kb.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≤–µ–Ω—Ç', callback_data=f'{AdminCB.EVENT_START.value}')
        kb.button(text='üñç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≤–µ–Ω—Ç', callback_data=f'{AdminCB.EVENT_UPDATE_1.value}')
        kb.button(text='üìØ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data=f'{AdminCB.MAILING_START.value}')
        kb.button(text='üîó –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data=f'{AdminCB.ADD_START.value}')
    return kb.adjust(1).as_markup()


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
def get_event_venue_kb(venues: list[Venue], cb: str = AdminCB.EVENT_VENUE.value) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for venue in venues:
        kb.button(text=venue.name, callback_data=f'{cb}:{venue.id}')

    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{AdminCB.BACK_START.value}')
    return kb.adjust(1).as_markup()


# —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
def get_cancel_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'{AdminCB.DEL_MSG.value}')
    return kb.adjust(1).as_markup()


# –Ω–∞–∑–∞–¥ –∫ –∏–º–µ–Ω–∏
def get_event_back_kb(cb: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{cb}:{Action.BACK.value}')
    return kb.adjust(1).as_markup()


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
def get_event_date_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()

    today = datetime.today()
    for i in range(0, 10):
        day = today + timedelta(days=i)
        day_str = day.strftime(conf.date_format)
        kb.button(text=day_str[:-5], callback_data=f'{AdminCB.EVENT_DATE.value}:{day_str}')

    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{AdminCB.EVENT_COVER.value}')
    return kb.adjust(2).as_markup()


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
def get_event_time_kb(popular_time: list[str]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()

    for time_book in popular_time or []:
        kb.button(text=time_book, callback_data=f'{AdminCB.EVENT_TIME.value}:{time_book.replace(":", " ")}')

    bc_bt = InlineKeyboardBuilder()
    bc_bt.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{AdminCB.EVENT_COVER.value}:{Action.BACK.value}')
    return kb.adjust(2).attach(bc_bt).as_markup()


# –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
def get_event_end_kb(event_id: int = 0) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏—é', callback_data=f'{AdminCB.EVENT_EDIT.value}:{EventStep.OPTION_NAME.value}')
    kb.button(text='üóë –£–¥–∞–ª–∏—Ç—å –æ–ø—Ü–∏—é', callback_data=f'{AdminCB.EVENT_EDIT.value}:{EventStep.OPTION_DEL.value}')
    kb.button(text='üñç –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', callback_data=f'{AdminCB.EVENT_EDIT.value}:{EventStep.VENUE.value}')
    kb.button(text='üñç –ò–∑–º–µ–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫—É', callback_data=f'{AdminCB.EVENT_EDIT.value}:{EventStep.COVER.value}')
    kb.button(text='üñç –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'{AdminCB.EVENT_EDIT.value}:{EventStep.NAME.value}')
    kb.button(text='üñç –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', callback_data=f'{AdminCB.EVENT_EDIT.value}:{EventStep.DATE.value}')
    kb.button(text='üñç –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è', callback_data=f'{AdminCB.EVENT_EDIT.value}:{EventStep.TIME.value}')
    kb.button(
        text='‚úÖ –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ' if event_id else '‚úÖ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
        callback_data=f'{AdminCB.EVENT_END.value}'
    )
    return kb.adjust(1).as_markup()


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
def get_event_option_select_kb(options: list) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()

    for option in options or []:
        kb.button(text=str(option), callback_data=f'{AdminCB.EVENT_OPTION.value}:{option}')

    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{AdminCB.EVENT_OPTION.value}:{Action.BACK.value}')
    return kb.adjust(2).as_markup()


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
def get_event_option_del_kb(options: list[dict]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()

    i = 0
    for option in options or []:
        opt_obj = OptionData(**option)
        kb.button(text=opt_obj.name, callback_data=f'{AdminCB.EVENT_DEL_OPTION_2.value}:{i}')
        i += 1

    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{AdminCB.EVENT_OPTION.value}:{Action.BACK.value}')
    return kb.adjust(1).as_markup()


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–≤–µ–Ω—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def get_update_event_kb(events: list[Event]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for event in events:
        kb.button(text=event.name, callback_data=f'{AdminCB.EVENT_UPDATE_2.value}:{event.id}')

    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{AdminCB.BACK_START.value}')
    return kb.adjust(1).as_markup()


# —Å–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤
def get_ticket_state_kb(ticket_stat: list[TicketStatRow]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for event in ticket_stat:
        kb.button(
            text=f'({event.ticket_count}) {event.event_name}',
            callback_data=f'{AdminCB.VIEW_BOOK.value}:{Key.QR_TICKET.value}:{event.event_id}'
        )

    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{AdminCB.BACK_START.value}')
    return kb.adjust(1).as_markup()


# —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–µ–π
def get_book_state_kb(book_stat: list[BookStatRow]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for book_date in book_stat:
        date_str = book_date.date.strftime(conf.date_format)
        kb.button(
            text=f'{date_str[:-5]} ({book_date.book_count})',
            callback_data=f'{AdminCB.VIEW_BOOK.value}:{Key.QR_BOOK.value}:{date_str}'
        )

    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{AdminCB.BACK_START.value}')
    return kb.adjust(1).as_markup()


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –±—Ä–æ–Ω–∏
def get_book_manage_kb(book_id: int, book_type: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(
        text='üì≤ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data=f'{AdminCB.SEND_MESSAGE_START.value}:{book_type}:{book_id}:0'
    )
    kb.button(text='üóë –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å', callback_data=f'{AdminCB.SETTINGS_REMOVE_1.value}:{book_type}:{book_id}')

    return kb.adjust(1).as_markup()


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –±—Ä–æ–Ω–∏
def get_mailing_send_kb(second: bool = False) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    if second:
        kb.button(text='üì≤ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', callback_data=f'{AdminCB.MAILING_2.value}:{Action.SEND.value}')
    else:
        kb.button(text='üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'{AdminCB.MAILING_1.value}')

    kb.button(text='üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'{AdminCB.MAILING_2.value}:{Action.DEL.value}')
    return kb.adjust(1).as_markup()


# –æ—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω—É
def get_send_answer_kb(user_id: int, book_id: int, book_type: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='üì≤ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'{AdminCB.SEND_MESSAGE_START.value}:{book_type}:{book_id}:{user_id}')
    return kb.adjust(1).as_markup()


# –æ—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω—É
def get_add_admin_status_kb(venue_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='–ê–¥–º–∏–Ω', callback_data=f'{AdminCB.ADD_STATUS.value}:{venue_id}:{UserStatus.ADMIN.value}')
    kb.button(text='–ü–µ—Ä—Å–æ–Ω–∞–ª', callback_data=f'{AdminCB.ADD_STATUS.value}:{venue_id}:{UserStatus.STAFF.value}')
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'{AdminCB.ADD_START.value}')
    return kb.adjust(2, 1).as_markup()
