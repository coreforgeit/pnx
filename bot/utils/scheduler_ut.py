from apscheduler.triggers.interval import IntervalTrigger
from datetime import datetime, date, time, timedelta

import keyboards as kb
from init import scheduler, bot
from settings import log_error
from db import User, Book
from data import texts_dict
from enums import NoticeKey


# –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
async def start_schedulers():
    scheduler.start()


# —Ç–æ—Ä–º–æ–∑–∏—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
async def shutdown_schedulers():
    scheduler.shutdown()


# –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∑–∞ –¥–µ–Ω—å
async def notice_book_for_day(book_id: int):
    book = await Book.get_booking_with_venue(book_id)

    if book and book.is_active:
        text = f'–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –±—Ä–æ–Ω–∏ {book.date_book_str()} –≤ {book.time_book_str()} –≤ {book.venue.name}'
        await bot.send_message(chat_id=book.user_id, text=text)


# –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∑–∞ 3 —á–∞—Å–∞
async def notice_book_for_2_hours(book_id):
    book = await Book.get_booking_with_venue(book_id)

    if book and book.is_active and not book.is_come:
        text = f'–ñ–¥—ë–º –≤–∞—Å —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –≤ {book.venue.name}'
        await bot.send_message(chat_id=book.user_id, text=text, reply_markup=kb.get_view_qr_kb(book.qr_id))


# –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏
async def notice_book_for_now(book_id: int):
    book = await Book.get_booking_with_venue(book_id)

    if book and book.is_active and not book.is_come:
        text = f'–í–∞—à–∞ –±—Ä–æ–Ω—å –∞–∫—Ç–∏–≤–Ω–∞, –º—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –µ—â—ë 30 –º–∏–Ω—É—Ç –≤ {book.venue.name}'
        await bot.send_message(chat_id=book.user_id, text=text, reply_markup=kb.get_view_qr_kb(book.qr_id))


# –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏
async def notice_book_for_close(book_id: int):
    book = await Book.get_booking_with_venue(book_id)

    if book and book.is_active and not book.is_come:
        text = f'–ú—ã –Ω–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –≤–∞—Å üòî –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –±—Ä–æ–Ω—å –±—ã–ª–∞ —Å–Ω—è—Ç–∞.'
        await bot.send_message(chat_id=book.user_id, text=text)

        await Book.update(book_id=book_id, is_active=False)


# —Å–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def create_book_notice(book_id: int, book_date: date, book_time: time):  # –Ω–µ —É–¥–∞–ª—è—Ç—å end_date
    # end_date = datetime.now() + timedelta(minutes=6)

    now = datetime.now()
    book_dt = datetime.combine(book_date, book_time)

    book_dt_for_day = book_dt - timedelta(days=1)
    if book_dt_for_day < now:
        scheduler.add_job(
            func=notice_book_for_day,
            trigger='date',
            run_date=book_dt_for_day,
            id=f"{book_id}-{NoticeKey.BOOK_DAY.value}",
            args=[book_id],
            replace_existing=True,
        )

    book_dt_for_2_hours = book_dt - timedelta(hours=2)
    if book_dt_for_2_hours < now:
        scheduler.add_job(
            func=notice_book_for_2_hours,
            trigger='date',
            run_date=book_dt_for_2_hours,
            id=f"{book_id}-{NoticeKey.BOOK_2_HOUR.value}",
            args=[book_id],
            replace_existing=True,
        )

    scheduler.add_job(
        func=notice_book_for_now,
        trigger='date',
        run_date=book_dt,
        id=f"{book_id}-{NoticeKey.BOOK_NOW.value}",
        args=[book_id],
        replace_existing=True,
    )

    book_dt_for_close = book_dt + timedelta(minutes=30)
    scheduler.add_job(
        func=notice_book_for_close,
        trigger='date',
        run_date=book_dt_for_close,
        id=f"{book_id}-{NoticeKey.BOOK_CLOSE.value}",
        args=[book_id],
        replace_existing=True,
    )
