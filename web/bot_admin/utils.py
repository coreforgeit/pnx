import logging

from gspread.exceptions import APIError
from telebot.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from io import BytesIO
from datetime import datetime, date, time, timedelta
from time import sleep

import segno
import os
import gspread

from web.settings import bot, scheduler, DATE_FORMAT, TIME_SHORT_FORMAT, GOOGLE_KEY_PATH
from .models import Ticket
from enums import NoticeKey, Key, UserCB, book_status_dict


def generate_and_sand_qr(chat_id: int, qr_data: str, caption: str = None) -> str:
    qr = segno.make_qr(qr_data, error="H")

    buffer = BytesIO()
    qr.save(buffer, kind="png", scale=12, dark='green')
    buffer.seek(0)

    input_file = InputFile(buffer, file_name=f"{qr_data}.png")
    message = bot.send_photo(chat_id=chat_id, photo=input_file, caption=caption)
    return message.photo[-1].file_id


def get_ticket_text(ticket: Ticket) -> str:
        date_event = ticket.event.date_event.strftime(DATE_FORMAT)
        time_event = ticket.event.time_event.strftime(TIME_SHORT_FORMAT)

        return (
            f'#{ticket.id}\n'
            f'<b>{ticket.event.name}\n'
            f'üìç {ticket.event.venue.name}\n'
            f'‚è∞ {date_event} {time_event}\n'
            f'ü™ë {ticket.option.name}</b>\n'
            f'üìé –°—Ç–∞—Ç—É—Å: {book_status_dict.get(ticket.status, "–Ω–¥")}\n'

        ).replace('None', '')


# –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä-–∫–æ–¥
def get_view_qr_kb(book_type: str, entry_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        keyboard=[
            [InlineKeyboardButton(
                text='üé´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å QR-–∫–æ–¥',
                callback_data=f'{UserCB.VIEW_QR.value}:{book_type}:{entry_id}'
            )]
        ]
    )


def notice_book_for_day(entry_id: int):
    ticket = Ticket.get_by_id(entry_id)

    if ticket and ticket.is_active:
        time_str = ticket.event.time_event.strftime(TIME_SHORT_FORMAT)
        text = f'–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ {ticket.event.name} –∑–∞–≤—Ç—Ä–∞ –≤ {time_str} –≤ {ticket.event.venue.name}'
        bot.send_message(chat_id=ticket.user_id, text=text)


# –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∑–∞ 3 —á–∞—Å–∞
def notice_book_for_2_hours(entry_id: int):
    ticket = Ticket.get_by_id(entry_id)

    if ticket and ticket.is_active:
        text = f'–ñ–¥—ë–º –≤–∞—Å —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –≤ {ticket.event.venue.name} –Ω–∞ {ticket.event.name}'
        bot.send_message(
            chat_id=ticket.user_id,
            text=text,
            reply_markup=get_view_qr_kb(book_type=Key.QR_TICKET.value, entry_id=ticket.id))


# –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏
def notice_book_for_now(entry_id: int):
    ticket = Ticket.get_by_id(entry_id)

    if ticket and ticket.is_active:
        text = f'–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏!! –ñ–¥—ë–º –≤–∞—Å –≤ {ticket.event.venue.name} –Ω–∞ {ticket.event.name}'
        bot.send_message(
            chat_id=ticket.user_id,
            text=text,
            reply_markup=get_view_qr_kb(book_type=Key.QR_TICKET.value, entry_id=ticket.id))


# —Å–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def create_book_notice(book_id: int, book_date: date, book_time: time):  # –Ω–µ —É–¥–∞–ª—è—Ç—å end_date
    now = datetime.now()
    book_dt = datetime.combine(book_date, book_time)
    logging.warning(f'now: {now}')

    book_dt_for_day = book_dt - timedelta(days=1)
    # book_dt_for_day = now + timedelta(minutes=1)
    # logging.warning(f'book_dt_for_day: {book_dt_for_day}')
    # logging.warning(f'book_dt_for_day < now: {book_dt_for_day < now}')

    if book_dt_for_day > now:
        scheduler.add_job(
            func=notice_book_for_day,
            trigger='date',
            run_date=book_dt_for_day,
            id=f"{book_id}-{Key.QR_TICKET.value}-{NoticeKey.BOOK_DAY.value}",
            args=[book_id,],
            replace_existing=True,
        )

    book_dt_for_2_hours = book_dt - timedelta(hours=2)
    # book_dt_for_2_hours = now + timedelta(minutes=2)

    if book_dt_for_2_hours > now:
        scheduler.add_job(
            func=notice_book_for_2_hours,
            trigger='date',
            run_date=book_dt_for_2_hours,
            id=f"{book_id}-{Key.QR_TICKET.value}-{NoticeKey.BOOK_2_HOUR.value}",
            args=[book_id,],
            replace_existing=True,
        )

    # book_dt = now + timedelta(minutes=3)

    scheduler.add_job(
        func=notice_book_for_now,
        trigger='date',
        run_date=book_dt,
        id=f"{book_id}-{Key.QR_TICKET.value}-{NoticeKey.BOOK_NOW.value}",
        args=[book_id,],
        replace_existing=True,
    )


def update_book_status_gs(
        spreadsheet_id: str,
        sheet_name: str,
        status: str,
        row: int,
) -> None:
    gc = gspread.service_account(filename=GOOGLE_KEY_PATH)

    spreadsheet = gc.open_by_key(spreadsheet_id)
    if str(sheet_name).isdigit():
        worksheet = spreadsheet.get_worksheet_by_id(int(sheet_name))
    else:
        worksheet = spreadsheet.worksheet(sheet_name)

    new_values = [[book_status_dict.get(status)]]

    cell_range = f"I{row}"

    max_retries = 10
    pause_sec = 2

    for attempt in range(max_retries):
        try:
            return worksheet.update(cell_range, new_values)
        except APIError as e:
            if "Quota exceeded" in str(e):
                print(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}, –∂–¥—É {pause_sec} —Å–µ–∫...")
                sleep(pause_sec)
            else:
                raise  # –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ –≥–ª–æ—Ç–∞–µ–º
    raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets")


# –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏
def recover_entities(entities_str: t.Optional[str]) -> list[MessageEntity]:
    if not entities_str:
        return []

    entities_list = []
    entities: list[dict] = json.loads(entities_str)
    if entities:
        for entity in entities:
            entities_list.append(MessageEntity(**entity))

    return entities_list